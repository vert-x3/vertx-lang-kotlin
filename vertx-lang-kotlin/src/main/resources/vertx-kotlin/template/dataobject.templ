@includeNamed{'/vertx-java/template/common-lib.templ'}
@code{

  /**
   * Render a tag link to an html link, this function is used as parameter of the
   * renderDocToHtml function when it needs to render tag links.
   */
  def renderLinkToHtml(link) {
    var rawType = link.targetType.raw;
    if (rawType.module != null) {
      var label = link.label.trim();
      if (rawType.kind == CLASS_DATA_OBJECT) {
        return "[" + rawType.name + "]";
      } else {
        if (type.kind == CLASS_API) {
          var elt = link.targetElement;
          var eltKind = elt.getKind().name();
          var ret = "[" + rawType.name + "]";
          if (label.length() > 0) {
            ret += "[" + label + "]" + ret;
          }
          return ret;
        }
      }
    }
    return "[" + rawType.name + "]";
  }

  def mapKotlinType(type) {
    if (type.name == 'void' || type.name == 'java.lang.Void') {
      ret = 'Unit';
    } else if (type.name == 'Object' || type.name == 'java.lang.Object') {
      ret = 'Any';
    } else if (type.name == 'Throwable' || type.name == 'java.lang.Throwable') {
      ret = 'Throwable';
    } else if (type.kind == CLASS_STRING) {
      ret = 'String';
    } else if (type.kind == CLASS_PRIMITIVE || type.kind == CLASS_BOXED_PRIMITIVE) {
      if (type.name == 'byte' || type.name == 'java.lang.Byte') {
        ret = 'Byte';
      } else if (type.name == 'short' || type.name == 'java.lang.Short') {
        ret = 'Short';
      } else if (type.name == 'int' || type.name == 'java.lang.Integer') {
        ret = 'Int';
      } else if (type.name == 'long' || type.name == 'java.lang.Long') {
        ret = 'Long';
      } else if (type.name == 'float' || type.name == 'java.lang.Float') {
        ret = 'Float';
      } else if (type.name == 'double' || type.name == 'java.lang.Double') {
        ret = 'Double';
      } else if (type.name == 'boolean' || type.name == 'java.lang.Boolean') {
        ret = 'Boolean';
      } else if (type.name == 'char' || type.name == 'java.lang.Character') {
        ret = 'Char';
      }
    } else if (type.kind == CLASS_DATA_OBJECT) {
      ret = type.raw.name
    }  else if (type.kind == CLASS_ENUM) {
      ret = type.simpleName;
    } else if (type.kind == CLASS_JSON_OBJECT || type.kind == CLASS_JSON_ARRAY) {
      ret = type.name
    } else {
      ret = type.name
    }
    return ret
  }

  def applyPropertyKind(type, kind) {
    if (kind.isList()) {
      return 'List<' + type + '>'
    } else if (kind.isSet()) {
      return 'Set<' + type + '>';
    } else if (kind.isMap()) {
      return 'Map<String, ' + type + '>';
    }
    return type
  }

  def syntheticName(property, type) {
    if (property.getterMethod != null && !property.getterMethod.startsWith("get")) {
      return property.getterMethod
    }
    return property.name
  }

  def filterProperties(properties) {
    var result = [];
    for (p : properties) {
      if (p.setterMethod != null || p.adderMethod != null) {
        result.add(p)
      }
    }
    return result
  }

  def genImports() {
    var result = new java.util.HashSet();
    for (p : properties) {
      if ((p.type.kind == CLASS_ENUM || p.type.kind == CLASS_DATA_OBJECT) && p.type != type) {
        result.add(p.type.name);
      }
    }
    var asList = [];
    asList.addAll(result);
    java.util.Collections.sort(asList);
    return asList;
  }
}

package @{type.raw.translatePackageName("kotlin")}\n
\n
import @{type.raw.name}\n
@foreach{genImport:genImports()}
import @{genImport}\n
@end{}
\n

@if{doc != null}
/**\n
 * A function providing a DSL for building [@{type.name}] objects.\n
 *\n
@{renderDocToHtml(" *", doc, renderLinkToHtml)}
 *\n
	@foreach{property:filterProperties(properties)}
 * @param @{property.name} @if{property.doc != null}@{renderTokensToHtml("", property.doc.tokens, renderLinkToHtml, "")}@end{}\n
	@end{}
 *\n
 * <p/>\n
 * NOTE: This function has been automatically generated from the [@{type.name} original] using Vert.x codegen.\n
 */\n
@end{}
fun ${type.raw.simpleName}(\n
	@foreach{property:filterProperties(properties)}
  @{property.name}: @{applyPropertyKind(mapKotlinType(property.type), property.kind)}? = null@end{',\n'}
): @{type.raw.simpleName} = @{type.raw.name}(@if{!hasEmptyConstructor}io.vertx.core.json.JsonObject()@end{}).apply {\n
\n
@foreach{property:filterProperties(properties)}
  if (@{property.name} != null) {\n
	@if{property.setterMethod != null}
    this.@{property.setterMethod}(@{property.name})\n
	@else{}
    for (item in @{property.name}) {\n
		@if{property.kind.map}
      this.@{property.adderMethod}(item.key, item.value)\n
		@else{}
      this.@{property.adderMethod}(item)\n
		@end{}
    }\n
	@end{}
  }\n
@end{}
}\n
\n